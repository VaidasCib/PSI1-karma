@page "/pendingvolunteer/{Id:guid}"
@using System.Text.RegularExpressions;
@using Karma.Services
@inject INotificationTransmitter m_notificationTransmitter
@inject IEventPriority m_eventPriority

<head>
    <link href="css/site.css" rel="stylesheet" />
</head>

@if (potentialVolunteer != null)
{
    <h1 class="mat">Manage join request</h1>
                    <div class="mat-layout-grid">
                        <div class="mat-layout-grid-inner">
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5">
                                <MatTextField @bind-Value="@potentialVolunteer.Name" @oninput="@((e) => { potentialVolunteer.Name = (string)e.Value; })" Label="Volunteer Name" Outlined="true" Class="element" Style=""></MatTextField>
                                <MatTextField @bind-Value="@potentialVolunteer.Surname" @oninput="@((e) => { potentialVolunteer.Surname = (string)e.Value; })" Label="Volunteer Surname" Outlined="true" Class="element"></MatTextField>
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-5">
                                <MatTextField @bind-Value="@EquipmentName" @oninput="@((e) => { EquipmentName = (string)e.Value; })" Label="Name of new equipment" Outlined="true" Class="element"></MatTextField>
                                <MatButton Raised="true" class="btn btn-primary element" @onclick="AddNewEquipmentToVolunteer">Add this equipment</MatButton>
                            </div>
                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2 mat-layout-grid-cell-align-middle">
                                <MatButton class="btn btn-primary" Outlined="true" Style="background-color:mediumseagreen;color:azure" @onclick="() => AddANewVolunteer()">Accept request</MatButton>
                                <br>
                                <br>
                                <MatButton class="btn btn-primary" Outlined="true" Style="background-color:crimson;color:azure" @onclick="() => RemovePotentialVolunteer()">Decline request</MatButton>
                            </div>
                        </div>
                    </div>
    <MatTextField @bind-Value="@FilterValue" OnInput="@(e => FilterValue = e.Value.ToString())" Label="Search Charity Events" Icon="search" IconTrailing="true"></MatTextField>
    <MatAccordion Multi="true">
        <MatExpansionPanel @bind-Expanded="@panelOpenState1">
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Assigned evens</MatExpansionPanelHeader>
        </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatList>

                @if (GetEventsOfThisVolunteer() != null)
                {
                    @foreach (var charityEvent in GetEventsOfThisVolunteer())
                    {
                        var regex = new Regex($"(.*){FilterValue}(.*)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                        var matches = regex.Matches(charityEvent.Name + charityEvent.Description);
                        @if (matches.Count > 0)
                        {
                            <MatListItem style=" display: inline-block; width: 100%;">
                            <div style="float:left">
                            @charityEvent.Name
                            </div>
                            <div style="float:right">
                            @if (charityEvent.ManagerId == CurrentUserId)
                            {
                                <MatButton Outlined="true" class="btn btn-primary" @onclick="() => RemoveEventFromList(charityEvent.Id)">Remove</MatButton>
                            }
                            </div>
                            </MatListItem>
                        }
                    }
                }
                </MatList>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>

        <MatExpansionPanel @bind-Expanded="@panelOpenState2">
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Open events</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatList TwoLine="true">
                    @foreach (var charityEvent in m_eventPriority.GetHighPriorityEvents(CurrentUserId))
                    {
                        @if (listOfCharityEvents == null || !listOfCharityEvents.Contains(charityEvent))
                        {
                            var regex = new Regex($"(.*){FilterValue}(.*)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                            var matches = regex.Matches(charityEvent.Name + charityEvent.Description);
                            @if (matches.Count > 0)
                            {
                                <MatListItem style=" display: inline-block; width: 100%;">
                                    <MatListItemPrimaryText>
                                        <div style="float:left">
                                            @charityEvent.Name
                                        </div>
                                        <div style="float:right">
                                            <MatButton Outlined="true" class="btn btn-primary" @onclick="() => AddEventToVolunteerList(charityEvent.Id)">Add</MatButton>
                                        </div>
                                    </MatListItemPrimaryText>
                                    <MatListItemSecondaryText Style="color:darkgoldenrod">High priority</MatListItemSecondaryText>
                                </MatListItem>
                                <MatListDivider></MatListDivider>
                            }
                        }
                    }
                    @foreach (var charityEvent in m_eventPriority.GetRestOfEvents(CurrentUserId))
                    {
                        @if (listOfCharityEvents == null || !listOfCharityEvents.Contains(charityEvent))
                        {
                            var regex = new Regex($"(.*){FilterValue}(.*)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                            var matches = regex.Matches(charityEvent.Name + charityEvent.Description);
                            @if (matches.Count > 0)
                            {
                                <MatListItem style=" display: inline-block; width: 100%;">
                                    <MatListItemPrimaryText>
                                        <div style="float:left">
                                            @charityEvent.Name
                                        </div>
                                        <div style="float:right">
                                            <MatButton Outlined="true" class="btn btn-primary" @onclick="() => AddEventToVolunteerList(charityEvent.Id)">Add</MatButton>
                                        </div>
                                    </MatListItemPrimaryText>
                                    <MatListItemSecondaryText Style="color: darkcyan">Low priority</MatListItemSecondaryText>
                                </MatListItem>
                                <MatListDivider></MatListDivider>
                            }
                        }
                    }
                </MatList>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>

        <MatExpansionPanel @bind-Expanded="@panelOpenState3">
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Equipment that this volunteer has brought</MatExpansionPanelHeader>
        </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatList>
                    @foreach (var equipment in GetEquipmentOfThisVolunteer())
                    {
                        <MatListItem style=" display: inline-block; width: 100%;">
                        <div style="float:left">
                        @equipment.Name
                        </div>
                        <div style="float:right">
                        <MatButton Outlined="true" class="btn btn-primary" @onclick="() => RemoveEquipment(equipment)">Remove</MatButton>
                        </div>
                        </MatListItem>
                    }
                </MatList>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
    </MatAccordion>
}
else
{
    <h1 class="mat">Sorry, but this request was not found</h1>
}
