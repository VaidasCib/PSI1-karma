@page "/addvolunteer"
@using Karma.Models
@using Karma.Data
@using System.Security.Claims
@inject IJSRuntime m_jsRuntime
@using Microsoft.EntityFrameworkCore;

<h1>Add volunteer</h1>

@if (m_httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
{
    <label for="fname">Volunteer name:</label>
    <input type="text" @bind="@VolunteerName" @oninput="@((e) => { VolunteerName = (string)e.Value; })" />
    <br>
    <br>
    <label for="fname">Volunteer surname:</label>
    <input type="text" @bind="@VolunteerSurname" @oninput="@((e) => { VolunteerSurname = (string)e.Value; })" />
    <br>
    <br>
    <button class="btn btn-primary" @onclick="AddThisVolunteer">Add volunteer</button>
    <br>
    <br>
    <br>
    <br>
    <table class="table">
        <tbody>
            @if (GetEventsOfThisVolunteer() != null)
            {
                <tr>
                    <th>Charity events that this volunteer is working on:</th>
                    <th>Actions:</th>
                </tr>
                @foreach (var charityEvent in GetEventsOfThisVolunteer())
                {
                    <tr>
                        <td>@charityEvent.Name</td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => RemoveEventFromList(charityEvent.Id)">Remove</button>
                        </td>
                    </tr>
                }
            }
            <tr>
                <th>Charity events that this volunteer could be a part of:</th>
                <th>Actions:</th>
            </tr>
            @foreach (var charityEvent in GetEventsNotOfThisVolunteer())
            {
                @if (listOfCharityEvents == null || !listOfCharityEvents.Contains(charityEvent))
                {
                    <tr>
                        <td>@charityEvent.Name</td>
                        <td>
                            @if (charityEvent.ManagerId == CurrentUserId)
                            {
                                @if (charityEvent.Volunteers.Count >= charityEvent.MaxVolunteers)
                                {
                                    <button class="btn btn-primary" disabled="disabled">Add</button>
                                }
                                else
                                {
                                    <button class="btn btn-primary" @onclick="() => AddEventToVolunteerList(charityEvent.Id)">Add</button>
                                }
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <br>
    <br>
}
else
{
    <label for="fname">Please LogIn:</label>
}
@code
{
    string VolunteerName { get; set; }
    string VolunteerSurname { get; set; }
    private List<CharityEvent> listOfCharityEvents = new List<CharityEvent>();
    KarmaContext m_context = new KarmaContext();
    string CurrentUserId { get; set; }

    protected override void OnInitialized()
    {
        var principal = m_httpContextAccessor.HttpContext.User;
        CurrentUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
    }

    private async Task AddThisVolunteer()
    {
        var vol = new Volunteer(name: VolunteerName, surname: VolunteerSurname, Guid.NewGuid(), listOfCharityEvents);
        m_context.Volunteers.Add(vol);
        m_context.SaveChanges();
        m_uriHelper.NavigateTo("/volunteers");
        await m_jsRuntime.InvokeVoidAsync("alert", "The volunteer has been added");
    }

    public IEnumerable<ICharityEvent> GetEventsOfThisVolunteer()
    {
        return listOfCharityEvents;
    }

    public IEnumerable<ICharityEvent> GetEventsNotOfThisVolunteer()
    {
        return m_context.Events.Include(p => p.Volunteers);
    }

    private void AddEventToVolunteerList(Guid id)
    {
        listOfCharityEvents.Add(m_context.Events.Where(p => p.Id == id).FirstOrDefault());
    }

    private void RemoveEventFromList(Guid id)
    {
        listOfCharityEvents.Remove(m_context.Events.Where(p => p.Id == id).FirstOrDefault());
    }
}
