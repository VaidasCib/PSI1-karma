@page "/volunteers"
@using Karma.Models
@using Microsoft.EntityFrameworkCore;
@using System.Text.RegularExpressions;
@using System.Linq;
@inject IJSRuntime m_jsRuntime
<h1>Volunteers</h1>

@if (m_httpContextAccessor.HttpContext.User.Identity.IsAuthenticated)
{
    <p>
        Here you can find the list of volunteers working on various projects.
        <button class="btn btn-primary" @onclick="NavigateToAddVolunteer">Add a new volunteer</button>
    </p>
    <h5>Filter volunteers: </h5>
    <input @bind-value="FilterValue" @bind-value:event="oninput" />
    <table class="table">
        <tbody>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Events</th>
                <th>Actions</th>
            </tr>
            @foreach (var volunteer in GetVolunteers())
            {
                nameSurname = volunteer.Name + " " + volunteer.Surname;//SurnameName prideti
                var regex = new Regex($"(.*){FilterValue}(.*)", RegexOptions.Compiled | RegexOptions.IgnoreCase);
                var matches = regex.Matches(nameSurname);
                @if (matches.Count > 0)
                {
                    <tr>
                        <td>@volunteer.Name</td>
                        <td>@volunteer.Surname</td>
                        <td>
                            @if (volunteer.Events != null)
                            {

                                @foreach (var karmaEvent in volunteer.Events)
                                {
                                    <div @onclick="() => NavigateToIndividualEvent(karmaEvent.Id)">
                                        @karmaEvent.Name
                                    </div>
                                }
                            }

                        </td>
                        <td>
                            <button class="btn btn-primary" @onclick="() => NavigateToManageVolunteer(volunteer.Id)">Manage volunteer</button>
                            <button class="btn btn-primary" style="background-color: black;" @onclick="() => RemoveVolunteer(volunteer.Id)">Remove the volunteer</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
else
{
    <label for="fname">Please LogIn</label>
}
@code
{
    private String FilterValue { get; set; } = "";
    KarmaContext KarmaContext = new KarmaContext();
    private String nameSurname { get; set; } = "";

    public IEnumerable<IVolunteer> GetVolunteers()
    {
        return KarmaContext.Volunteers.Include(x => x.Events);
    }

    public void NavigateToIndividualEvent(Guid id)
    {
        m_uriHelper.NavigateTo($"event/{id}");
    }

    public void NavigateToAddVolunteer()
    {
        m_uriHelper.NavigateTo("addvolunteer");
    }

    private async Task RemoveVolunteer(Guid id)
    {
        KarmaContext.Volunteers.Where(x => x.Id == id).DeleteFromQuery();
        KarmaContext.SaveChanges();
        await m_jsRuntime.InvokeVoidAsync("alert", "The volunteer has been removed");
    }

    public void NavigateToManageVolunteer(Guid id)
    {
        m_uriHelper.NavigateTo($"volunteer/{id}");
    }
}
